using CrmPosKurİşlem;
using DevExpress.Utils;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace WindowsFormsApp5
{

    public partial class FrFiskurdegis : DevExpress.XtraEditors.XtraForm
    {
        MRTREntities db = new MRTREntities();
        public FrFiskurdegis()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
             gridControl1.DataSource = new System.ComponentModel.BindingList<CrmPosKurİşlem.wwwView_DovizliFisler>() /* TODO: Assign the real data here.*/;
            // This line of code is generated by Data Source Configuration Wizard
            gridControl2.DataSource = new System.ComponentModel.BindingList<CrmPosKurİşlem.wwwView_Dovizlifislerdetay>() /* TODO: Assign the real data here.*/;
        }

        public void listele()
        {
            gridControl1.DataSource = null;

            if (lookUpEdit1.Text != "<Seçiniz>")
            {
               
                    //long dkodid = long.Parse(lookUpEdit2.EditValue.ToString());
                    long kodu = long.Parse(lookUpEdit1.EditValue.ToString());
                    DateTime tarih = DateTime.Parse(dateEdit1.DateTime.ToString("yyyy.MM.dd") + " 00:00");
                    DateTime tarih2 = DateTime.Parse(dateEdit2.DateTime.ToString("yyyy.MM.dd") + " 23:59");
                    gridControl1.DataSource = db.wwwView_DovizliFisler.Where(a => a.Lkid == kodu && a.ISLEM_TARIHI >= tarih && a.ISLEM_TARIHI <= tarih2).ToList();
                //gridControl1.ForceInitialize();
                //gridView1.BestFitColumns();
                gridView1.Columns["Lkid"].Visible = false;                
                gridView1.Columns["ISLEM_TARIHI"].DisplayFormat.FormatType = DevExpress.Utils.FormatType.DateTime;
                gridView1.Columns["ISLEM_TARIHI"].DisplayFormat.FormatString = "dd/MM/yyyy hh:mm:ss";
                //XtraMessageBox.Show("Döviz Seçimi Yapmalısın..", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Question);

            }
            else
            {

                XtraMessageBox.Show("Lokasyon Seçimi Yapmalısın..", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Question);
            }
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            listele();
        }
        FileStream fs;        
        string fileName = "c:\\ERP12\\fistlkurdegisdisplaycrmpos.xml";
        string fileName2 = "c:\\ERP12\\fistlkurdegisdetaydisplaycrmpos.xml";
        private void FrFiskurdegis_Load(object sender, EventArgs e)
        {
            if (File.Exists(@"C:\ERP12\fistlkurdegisdisplaycrmpos.xml"))
            {

                // MessageBox.Show("Dosya bulundu.");
            }
            else
            {
                fs = File.Create(@"C:\ERP12\fistlkurdegisdisplaycrmpos.xml");
                fs.Close();
                //  MessageBox.Show("Dosya mevcut değil.");
            }
            if (File.Exists(@"C:\ERP12\fistlkurdegisdetaydisplaycrmpos.xml"))
            {

                // MessageBox.Show("Dosya bulundu.");
            }
            else
            {
                fs = File.Create(@"C:\ERP12\fistlkurdegisdetaydisplaycrmpos.xml");
                fs.Close();
                //  MessageBox.Show("Dosya mevcut değil.");
            }
            var list = new List<long> { 3320 };
            lookUpEdit1.Properties.DataSource = db.LOKASYON.Where(x => !list.Contains(x.ID)).ToList();
            lookUpEdit1.Properties.DisplayMember = "AD";
            lookUpEdit1.Properties.ValueMember = "ID";
            DevExpress.XtraEditors.Controls.LookUpColumnInfo col;
            col = new DevExpress.XtraEditors.Controls.LookUpColumnInfo("AD", "Lokasyon Seçiniz", 100);
            //col.SortOrder = DevExpress.Data.ColumnSortOrder.Descending;
            lookUpEdit1.Properties.Columns.Add(col);

            dateEdit1.EditValue = DateTime.Now;
            dateEdit2.EditValue = DateTime.Now;
            gridView1.OptionsBehavior.Editable = false;
            
            gridView1.OptionsView.ShowAutoFilterRow = true;
            gridView2.OptionsBehavior.Editable = false;

            gridView2.OptionsView.ShowAutoFilterRow = true;
            try
            {
                gridControl1.MainView.RestoreLayoutFromXml(fileName);
            }
            catch (Exception)
            {
                //XtraMessageBox.Show("Görünüm ayarları yüklenemedi(İlk kez çalıştırıyorsanız dikkate almayınız)", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Question);                
            }
            try
            {
                gridControl2.MainView.RestoreLayoutFromXml(fileName2);
            }
            catch (Exception)
            {
                //XtraMessageBox.Show("Görünüm ayarları yüklenemedi(İlk kez çalıştırıyorsanız dikkate almayınız)", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Question);                
            }

        }
        private void FrFiskurdegis_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Save the layout to an XML file
            gridControl1.MainView.SaveLayoutToXml(fileName);
            gridControl2.MainView.SaveLayoutToXml(fileName2);
        }
        
        private void gridControl1_MouseClick(object sender, MouseEventArgs e)
        {
            if (gridView1.GetFocusedRowCellValue("FIS_ID") != null)
            {
                long i = long.Parse(gridView1.GetFocusedRowCellValue("FIS_ID").ToString());
                var dvzfisdty = db.wwwView_Dovizlifislerdetay.Where(a => a.Fis_id == i).ToList();
                gridControl2.DataSource = dvzfisdty;
            }            
        }
        
        private void btnodmedegıs_Click(object sender, EventArgs e)
        {
            
            if (gridView1.GetFocusedRowCellValue("ID") != null)
            {
                FrChange odeme = new FrChange();

                decimal kur = decimal.Parse(gridView1.GetFocusedRowCellValue("KUR").ToString());
                DateTime tarih_islem = DateTime.Parse(gridView1.GetFocusedRowCellValue("ISLEM_TARIHI").ToString());
                long fis_id = long.Parse(gridView1.GetFocusedRowCellValue("FIS_ID").ToString());
                long id = long.Parse(gridView1.GetFocusedRowCellValue("ID").ToString());
                string fistutar = gridView1.GetFocusedRowCellValue("FIS_GENELTOP").ToString();
                string doviz = gridView1.GetFocusedRowCellValue("DOVIZTUR").ToString();

                if (gridView1.GetFocusedRowCellValue("NAKIT") != null)
                {
                    string nakit = gridView1.GetFocusedRowCellValue("NAKIT").ToString();
                    odeme.nakit = nakit;
                }
                else if (gridView1.GetFocusedRowCellValue("KREDI") != null)
                {
                    string kredi = gridView1.GetFocusedRowCellValue("KREDI").ToString();
                    odeme.kredi = kredi;
                }
                odeme.islemtarihi = tarih_islem;
                odeme.kur = kur;
                odeme.fis_id = fis_id;
                odeme.doviz = doviz;
                odeme.fistutar = fistutar;
                odeme.id = id;
                odeme.Show();
            }            
            else
            {
                XtraMessageBox.Show("Fiş listesinden Seçim Yapmalısın..", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Question);
            }
        }

        

        private void exceleAktarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "Excel (2003)(.xls)|*.xls|Excel (2010) (.xlsx)|*.xlsx |RichText File (.rtf)|*.rtf |Pdf File (.pdf)|*.pdf |Html File (.html)|*.html";
                if (saveDialog.ShowDialog() != DialogResult.Cancel)
                {
                    string exportFilePath = saveDialog.FileName;
                    string fileExtenstion = new System.IO.FileInfo(exportFilePath).Extension;

                    switch (fileExtenstion)
                    {
                        case ".xls":
                            gridControl1.ExportToXls(exportFilePath);
                            break;
                        case ".xlsx":
                            gridControl1.ExportToXlsx(exportFilePath);
                            break;
                        case ".rtf":
                            gridControl1.ExportToRtf(exportFilePath);
                            break;
                        case ".pdf":
                            gridControl1.ExportToPdf(exportFilePath);
                            break;
                        case ".html":
                            gridControl1.ExportToHtml(exportFilePath);
                            break;
                        case ".mht":
                            gridControl1.ExportToMht(exportFilePath);
                            break;
                        default:
                            break;
                    }

                    if (File.Exists(exportFilePath))
                    {
                        try
                        {
                            //Try to open the file and let windows decide how to open it.
                            System.Diagnostics.Process.Start(exportFilePath);
                        }
                        catch
                        {
                            String msg = "The file could not be opened." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                            MessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        String msg = "The file could not be saved." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                        MessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void gridView1_RowCellStyle(object sender, DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            //decimal abc = (decimal)view.GetRowCellValue(e.RowHandle, "SAT_DVZ");
            if (e.Column.FieldName == "PARAUSTU_TL")
            {
                var abc = view.GetRow(e.RowHandle) as wwwView_DovizliFisler;
                if (abc != null)
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, abc.PARAUSTU_TL > 0 ? FontStyle.Bold : FontStyle.Bold);
                    e.Appearance.ForeColor = abc.PARAUSTU_TL > 0 ? Color.Red : Color.Red;
                    e.Appearance.TextOptions.HAlignment = abc.PARAUSTU_TL > 0 ? HorzAlignment.Far : HorzAlignment.Near;
                }

            }
            
            else if (e.Column.FieldName == "NAKIT")
            {
                var abc = view.GetRow(e.RowHandle) as wwwView_DovizliFisler;
                if (abc != null)
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, abc.NAKIT > 0 ? FontStyle.Bold : FontStyle.Bold);
                    e.Appearance.ForeColor = abc.NAKIT > 0 ? Color.Green : Color.Green;
                    e.Appearance.TextOptions.HAlignment = abc.NAKIT > 0 ? HorzAlignment.Far : HorzAlignment.Near;
                }

            }
            else if (e.Column.FieldName == "TL_DEGER")
            {
                var abc = view.GetRow(e.RowHandle) as wwwView_DovizliFisler;
                if (abc != null)
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, abc.TL_DEGER > 0 ? FontStyle.Bold : FontStyle.Bold);
                    e.Appearance.ForeColor = abc.TL_DEGER > 0 ? Color.Green : Color.Green;
                    e.Appearance.TextOptions.HAlignment = abc.TL_DEGER > 0 ? HorzAlignment.Far : HorzAlignment.Near;
                }

            }
            else if (e.Column.FieldName == "TOPLAM_TL")
            {
                var abc = view.GetRow(e.RowHandle) as wwwView_DovizliFisler;
                if (abc != null)
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, abc.TOPLAM_TL > 0 ? FontStyle.Bold : FontStyle.Bold);
                    e.Appearance.ForeColor = abc.TOPLAM_TL > 0 ? Color.Green : Color.Green;
                    e.Appearance.TextOptions.HAlignment = abc.TOPLAM_TL > 0 ? HorzAlignment.Far : HorzAlignment.Near;
                }

            }
            else if (e.Column.FieldName == "KREDI")
            {
                var abc = view.GetRow(e.RowHandle) as wwwView_DovizliFisler;
                if (abc != null)
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, abc.KREDI > 0 ? FontStyle.Bold : FontStyle.Bold);
                    e.Appearance.ForeColor = abc.KREDI > 0 ? Color.Orange : Color.Orange;
                    e.Appearance.TextOptions.HAlignment = abc.KREDI > 0 ? HorzAlignment.Far : HorzAlignment.Near;
                }

            }
        }

       
    }
}
