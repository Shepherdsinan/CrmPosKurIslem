using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CrmPosKurİşlem
{
    public partial class Frfifoenvanter : DevExpress.XtraEditors.XtraForm
    {
        public Frfifoenvanter()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            gridControl1.DataSource = new System.ComponentModel.BindingList<CrmPosKurİşlem.Frfifoenvanter.ResultForFifostokenvanter>() /* TODO: Assign the real data here.*/;
        }
        MRTREntities db = new MRTREntities();

        public class ResultForFifostokenvanter
        {
            public long STOK_ID { get; set; }
            public string BARKOD { get; set; }            
            public string STOK_ADI { get; set; }                     
            public DateTime AL_FIS_TARIHI { get; set; }
            public decimal ELDEKIMIKTAR { get; set; }
            public decimal AL_BIRIMFIYAT { get; set; }
            public decimal AL_KUR { get; set; }           

            public decimal TOPLAM_AL_FIYATI { get; set; }
            
            public decimal TOP_AL_DVZ_FIYAT { get; set; }
            public decimal KUR_BUGUN { get; set; }
            public decimal TOP_AL_TL_DEGERI_BUGUN { get; set; }       
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (lookUpEdit1.Text != "<Seçiniz>")
            {
                listele();
                 
            }
            else
            {
                XtraMessageBox.Show("Lokasyon Seçimi Yapmalısın..", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Question);
            }
        }
        public void listele()
        {
            try
            {
                gridControl1.DataSource = null;
                //long kodu = long.Parse(lookUpEdit1.EditValue.ToString());
                
                var clientIdParameter = new SqlParameter("@lokasyonid", (string)lookUpEdit1.EditValue);
                if (checkBoxhareket.Checked)
                {
                    var result2 = db.Database.SqlQuery<ResultForFifostokenvanter>("crmpos_fifo_stok_envanter_doviz_hareket_gormemis @lokasyonid", clientIdParameter).ToList();
                    gridControl1.DataSource = result2;
                }
                else
                {
                    var result = db.Database.SqlQuery<ResultForFifostokenvanter>("crmpos_fifo_stok_envanter_doviz @lokasyonid", clientIdParameter).ToList();
                    gridControl1.DataSource = result;
                }         
                              
                gridView1.Columns["AL_FIS_TARIHI"].DisplayFormat.FormatType = DevExpress.Utils.FormatType.DateTime;
                gridView1.Columns["AL_FIS_TARIHI"].DisplayFormat.FormatString = "dd/MM/yyyy hh:mm:ss";
            }
            catch (Exception e)
            {

                MessageBox.Show(e.ToString());
            }


        }
        FileStream fs;
        string fileName = "c:\\ERP12\\fifoenvanterdisplaycrmpos.xml";
        private void Frfifoenvanter_Load(object sender, EventArgs e)
        {
            if (File.Exists(@"C:\ERP12\fifoenvanterdisplaycrmpos.xml"))
            {

                // MessageBox.Show("Dosya bulundu.");
            }
            else
            {
                fs = File.Create(@"C:\ERP12\fifoenvanterdisplaycrmpos.xml");
                fs.Close();
                //  MessageBox.Show("Dosya mevcut değil.");
            }

            var list = new List<long> { 3320 };
            lookUpEdit1.Properties.DataSource = db.LOKASYON.Where(x => !list.Contains(x.ID)).ToList();
            lookUpEdit1.Properties.DisplayMember = "AD";
            lookUpEdit1.Properties.ValueMember = "ID";
            DevExpress.XtraEditors.Controls.LookUpColumnInfo col;
            col = new DevExpress.XtraEditors.Controls.LookUpColumnInfo("AD", "Lokasyon Seçiniz", 100);
            //col.SortOrder = DevExpress.Data.ColumnSortOrder.Descending;
            lookUpEdit1.Properties.Items.Add(col);
            gridView1.OptionsBehavior.Editable = false;
            gridView1.OptionsView.ShowAutoFilterRow = true;
            gridControl1.ForceInitialize();

            try
            {
                gridControl1.MainView.RestoreLayoutFromXml(fileName);
            }
            catch (Exception)
            {
                //XtraMessageBox.Show("Görünüm ayarları yüklenemedi(İlk kez çalıştırıyorsanız dikkate almayınız)", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Question);                
            }
        }

        private void Frfifoenvanter_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Save the layout to an XML file
            gridControl1.MainView.SaveLayoutToXml(fileName);
        }

        private void exceleAktarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "Excel (2003)(.xls)|*.xls|Excel (2010) (.xlsx)|*.xlsx |RichText File (.rtf)|*.rtf |Pdf File (.pdf)|*.pdf |Html File (.html)|*.html";
                if (saveDialog.ShowDialog() != DialogResult.Cancel)
                {
                    string exportFilePath = saveDialog.FileName;
                    string fileExtenstion = new System.IO.FileInfo(exportFilePath).Extension;

                    switch (fileExtenstion)
                    {
                        case ".xls":
                            gridControl1.ExportToXls(exportFilePath);
                            break;
                        case ".xlsx":
                            gridControl1.ExportToXlsx(exportFilePath);
                            break;
                        case ".rtf":
                            gridControl1.ExportToRtf(exportFilePath);
                            break;
                        case ".pdf":
                            gridControl1.ExportToPdf(exportFilePath);
                            break;
                        case ".html":
                            gridControl1.ExportToHtml(exportFilePath);
                            break;
                        case ".mht":
                            gridControl1.ExportToMht(exportFilePath);
                            break;
                        default:
                            break;
                    }

                    if (File.Exists(exportFilePath))
                    {
                        try
                        {
                            //Try to open the file and let windows decide how to open it.
                            System.Diagnostics.Process.Start(exportFilePath);
                        }
                        catch
                        {
                            String msg = "The file could not be opened." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                            MessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        String msg = "The file could not be saved." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                        MessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

    }
}
